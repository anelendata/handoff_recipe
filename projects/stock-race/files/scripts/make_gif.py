# -*- coding: utf-8 -*-
"""stock_bar_chat_race

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1rJ6HrNb2b5gYIovdKunViov8aITZVJjk

## Set up
"""

# Commented out IPython magic to ensure Python compatibility.
is_interactive = False
workdir = "/tmp"


"""## Imports"""

import datetime
import json
import sys
import os

import pandas as pd
from pandas import DataFrame

import yfinance as yf
import bar_chart_race
import moviepy.editor as mp

from matplotlib import pyplot as plt

"""## Load Config"""

if not os.path.isfile("files/config.json"):
    raise Exception("Please provide files/config.json")

# example
config = {
    "period": "week",  # year, month, week, ytd
    "title": "Which stock was the best performer in the last {period}?",
    "symbols": ["FB", "AAPL", "NFLX", "GOOG", "MSFT"],
    }
dump_json = False
if dump_json:
    with open("files/config.json", "w") as f:
        json.dump(config, f, indent=2)

with open("files/config.json", "r") as f:
    config = json.load(f)

"""## Load data"""

today = datetime.date.today()
# Test
# today = datetime.date(year=2020, month=1, day=30)

period = config["period"]

if period == "ytd":
  today = datetime.date(year=today.year + 1, month=today.month, day=today.day)
  period = "year"

title = config["title"].format(period=period)

symbols = config["symbols"]

time_index = "Date"
period_template = '%B %d, %Y'

if period == "year":
    start_date = datetime.date(year=today.year - 1, month=1, day=1)
    end_date = datetime.date(year=today.year - 1, month=12, day=31)
    interval = "1wk"
elif period == "quarter":
    year = today.year
    month = int((today.month - 1) / 3) * 3 - 2
    if month < 1:
        month = 10
        year = year - 1
    start_date = datetime.date(year=year, month=month, day=1)
    tmp = start_date + datetime.timedelta(days=94)
    end_date = datetime.date(year=tmp.year, month=tmp.month, day=1) + datetime.timedelta(days=-1)
    interval = "1wk"
elif period == "month":
    month = today.month - 1
    if month < 1:
        month = 12
    start_date = datetime.date(year=today.year, month=month, day=1)
    end_date = datetime.date(year=start_date.year, month=start_date.month + 1, day=1) + datetime.timedelta(days=-1)
    interval = "1d"
elif period == "week":
    start_date = today + datetime.timedelta(days=-today.weekday(), weeks=-1)
    end_date = start_date + datetime.timedelta(days=5)
    interval = '90m'
    time_index = "Datetime"
    period_template = '%A, %B %d, %Y'

print(f"{today} Fetching {period} data for {start_date} - {end_date}")

style = "seaborn-dark"
dpi = 100
fig_w = 6
fig_h = 3
font_family = 'Arial'
fixed_max = False
fixed_min = False

if is_interactive:
    no_logo_file_name = None
else:
    no_logo_file_name = '/tmp/no_logo.mp4'

all = None
image_files = {}
for symbol in symbols:
    image_files[symbol] = f"files/{symbol}.png"
    tkr = yf.Ticker(symbol)
    historical = tkr.history(start=start_date, end=end_date, interval=interval)
    stock = DataFrame(historical.Close)
    stock["ticker"] = symbol
    roi = [0]
    for i in range(1, stock.shape[0]):
        roi.append((stock.Close[i] - stock.Close[0]) / stock.Close[0] * 100)
    stock["roi"] = roi
    if all is None:
      all = DataFrame(stock)
    else:
      all = all.append(stock)

columns = ["ticker"]
values = ["roi"]

long_format = True
if long_format:
    df = all.pivot_table(index=[time_index],
                        columns=columns,  # columns to populate
                        values=values,
                        aggfunc='sum')
                        # margins=True,  # add margins like total
df.columns = df.columns.get_level_values(1)

print(f"Parsing {df.shape[0]} data points for {df.shape[1]} symbols")

"""## Visualize"""

bcr = bar_chart_race.get_bcr(
    df=df,
    filename=no_logo_file_name,
    orientation='h',
    sort='desc',
    n_bars=6,
    fixed_order=False,
    steps_per_period=10,
    interpolate_period=False,
    bar_size=.95,
    period_label={'x': .95, 'y': .30, 'ha': 'right', 'va': 'center'},
    period_summary_func=lambda v, r: {'x': .95, 'y': .23,
                                      's': "", # f'Total: {v.nlargest(6).sum():,.0f}',
                                      'ha': 'right', 'size': 8, 'family': font_family},
    perpendicular_bar_func=None,
    period_length=500,
    title={'label': title,
           'size': 14,
           'color': '#00214D',
           'loc': 'center',
           'pad': 0
        },
    shared_fontdict={'family' : font_family, 'color' : '#00214D'},
    scale='linear',
    writer=None,
    bar_kwargs={'alpha': 0.7},
    filter_column_colors=False,
    image_files=image_files,
    # colors=cmap,
    period_template=period_template,
    bar_label_font={'size': 7},
    tick_label_font={'size': 7},
    fig_kwargs={'figsize': (fig_w, fig_h), 'facecolor': 'white', 'dpi': dpi, 'edgecolor': 'white'},
    bar_texttemplate='{x:,.1f}%',
    fixed_max=fixed_max,
    fixed_min=fixed_min,
    fixed_max_value=25,
    fixed_min_value=-25
    )

fig = bcr.create_figure()
fig.subplots_adjust(top=0.8)
for ax in fig.axes:
  ax.set_facecolor('white')
  ax.axes.yaxis.set_ticks([])
  ax.axes.yaxis.set_ticklabels([])
  ax.axes.yaxis.set_visible(False)
  ax.axes.xaxis.set_visible(False)
bcr.fig = fig

html = bcr.make_animation(blit=False)


video = mp.VideoFileClip("/tmp/no_logo.mp4")

logo = (mp.ImageClip("files/logo.png")
          .set_duration(video.duration)
          .resize(height=dpi * fig_h * 0.1) # if you need to resize...
          .margin(right=int(dpi * fig_w * 0.14), bottom=int(dpi * fig_h * 0.15), opacity=0) # (optional) logo-border padding
          .set_pos(("right","bottom")))

final = mp.CompositeVideoClip([video, logo])
final.write_gif("artifacts/stock.gif")
final.write_videofile("artifacts/stock.mp4")
